name: Déploiement vers Vercel après exécution des tests

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  deploy:
    needs: test  # Exécute le job de déploiement seulement si les tests réussissent
    runs-on: ubuntu-latest

    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Installation de Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"
          cache: "npm"

      - name: Installation des dépendances
        run: npm install

      - name: Build de l'application
        run: npm run build

      - name: Déploiement sur Vercel
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          npm install -g vercel
          vercel --prod --token $VERCEL_TOKEN --yes

name: Déploiement vers Vercel

# Condition de déclenchement
on:
  push:
    branches:
      - main # Déclenchement sur la branche principale (main)

jobs:
  deploy:
    runs-on: ubuntu-latest

		# Etapes
    steps:
    # 1. Checkout du code source
    - name: Checkout du code
      uses: actions/checkout@v3

    # 2. Installation de Node.js et des dépendances
    - name: Installation de Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '22' # Remplacez par la version Node.js utilisée par votre projet
        cache: 'npm'

    - name: Installation des dépendances
      run: npm install

    # 3. Construire l'application React
    - name: Build de l'application
      run: npm run build

    # 4. Déployer sur Vercel
    - name: Déploiement
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
      run: |
        npm install -g vercel
        vercel --prod --token $VERCEL_TOKEN --yes



        